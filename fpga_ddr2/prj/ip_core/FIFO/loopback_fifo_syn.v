// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: scfifo 

// ============================================================
// File Name: loopback_fifo.v
// Megafunction Name(s):
// 			scfifo
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.1.0 Build 162 10/23/2013 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2013 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//scfifo ADD_RAM_OUTPUT_REGISTER="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_NUMWORDS=1024 LPM_SHOWAHEAD="OFF" LPM_WIDTH=32 LPM_WIDTHU=10 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" aclr clock data q rdreq usedw wrreq INTENDED_DEVICE_FAMILY="Cyclone IV E"
//VERSION_BEGIN 13.1 cbx_altdpram 2013:10:23:18:05:48:SJ cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_fifo_common 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_scfifo 2013:10:23:18:05:48:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_dpfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_NUMWORDS=1024 LPM_SHOWAHEAD="OFF" lpm_width=32 lpm_widthu=10 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock data q rreq sclr usedw wreq INTENDED_DEVICE_FAMILY="Cyclone IV E"
//VERSION_BEGIN 13.1 cbx_altdpram 2013:10:23:18:05:48:SJ cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_fifo_common 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_scfifo 2013:10:23:18:05:48:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END


//a_fefifo ALLOW_RWCYCLE_WHEN_FULL="OFF" LPM_NUMWORDS=1024 lpm_widthad=10 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" aclr clock empty full rreq sclr usedw_out wreq
//VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_fifo_common 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END


//lpm_counter DEVICE_FAMILY="Cyclone IV E" lpm_width=10 aclr clock cnt_en q sclr updown
//VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END

//synthesis_resources = lut 10 reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  loopback_fifo_cntr
	( 
	aclr,
	clock,
	cnt_en,
	q,
	sclr,
	updown) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [9:0]  q;
	input   sclr;
	input   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
	tri0   sclr;
	tri1   updown;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_comb_bita_0combout;
	wire  [0:0]   wire_counter_comb_bita_1combout;
	wire  [0:0]   wire_counter_comb_bita_2combout;
	wire  [0:0]   wire_counter_comb_bita_3combout;
	wire  [0:0]   wire_counter_comb_bita_4combout;
	wire  [0:0]   wire_counter_comb_bita_5combout;
	wire  [0:0]   wire_counter_comb_bita_6combout;
	wire  [0:0]   wire_counter_comb_bita_7combout;
	wire  [0:0]   wire_counter_comb_bita_8combout;
	wire  [0:0]   wire_counter_comb_bita_9combout;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_comb_bita_1cout;
	wire  [0:0]   wire_counter_comb_bita_2cout;
	wire  [0:0]   wire_counter_comb_bita_3cout;
	wire  [0:0]   wire_counter_comb_bita_4cout;
	wire  [0:0]   wire_counter_comb_bita_5cout;
	wire  [0:0]   wire_counter_comb_bita_6cout;
	wire  [0:0]   wire_counter_comb_bita_7cout;
	wire  [0:0]   wire_counter_comb_bita_8cout;
	wire	[9:0]	wire_counter_reg_bit_d;
	wire	[9:0]	wire_counter_reg_bit_asdata;
	reg	[9:0]	counter_reg_bit;
	wire	[9:0]	wire_counter_reg_bit_ena;
	wire	[9:0]	wire_counter_reg_bit_sload;
	wire  aclr_actual;
	wire clk_en;
	wire [9:0]  data;
	wire  external_cin;
	wire  [9:0]  s_val;
	wire  [9:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;

	cycloneive_lcell_comb   counter_comb_bita_0
	( 
	.cin(external_cin),
	.combout(wire_counter_comb_bita_0combout[0:0]),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.dataa(counter_reg_bit[0]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_0.lut_mask = 16'h5A90,
		counter_comb_bita_0.sum_lutc_input = "cin",
		counter_comb_bita_0.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(wire_counter_comb_bita_1combout[0:0]),
	.cout(wire_counter_comb_bita_1cout[0:0]),
	.dataa(counter_reg_bit[1]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_1.lut_mask = 16'h5A90,
		counter_comb_bita_1.sum_lutc_input = "cin",
		counter_comb_bita_1.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_2
	( 
	.cin(wire_counter_comb_bita_1cout[0:0]),
	.combout(wire_counter_comb_bita_2combout[0:0]),
	.cout(wire_counter_comb_bita_2cout[0:0]),
	.dataa(counter_reg_bit[2]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_2.lut_mask = 16'h5A90,
		counter_comb_bita_2.sum_lutc_input = "cin",
		counter_comb_bita_2.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_3
	( 
	.cin(wire_counter_comb_bita_2cout[0:0]),
	.combout(wire_counter_comb_bita_3combout[0:0]),
	.cout(wire_counter_comb_bita_3cout[0:0]),
	.dataa(counter_reg_bit[3]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_3.lut_mask = 16'h5A90,
		counter_comb_bita_3.sum_lutc_input = "cin",
		counter_comb_bita_3.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_4
	( 
	.cin(wire_counter_comb_bita_3cout[0:0]),
	.combout(wire_counter_comb_bita_4combout[0:0]),
	.cout(wire_counter_comb_bita_4cout[0:0]),
	.dataa(counter_reg_bit[4]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_4.lut_mask = 16'h5A90,
		counter_comb_bita_4.sum_lutc_input = "cin",
		counter_comb_bita_4.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_5
	( 
	.cin(wire_counter_comb_bita_4cout[0:0]),
	.combout(wire_counter_comb_bita_5combout[0:0]),
	.cout(wire_counter_comb_bita_5cout[0:0]),
	.dataa(counter_reg_bit[5]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_5.lut_mask = 16'h5A90,
		counter_comb_bita_5.sum_lutc_input = "cin",
		counter_comb_bita_5.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_6
	( 
	.cin(wire_counter_comb_bita_5cout[0:0]),
	.combout(wire_counter_comb_bita_6combout[0:0]),
	.cout(wire_counter_comb_bita_6cout[0:0]),
	.dataa(counter_reg_bit[6]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_6.lut_mask = 16'h5A90,
		counter_comb_bita_6.sum_lutc_input = "cin",
		counter_comb_bita_6.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_7
	( 
	.cin(wire_counter_comb_bita_6cout[0:0]),
	.combout(wire_counter_comb_bita_7combout[0:0]),
	.cout(wire_counter_comb_bita_7cout[0:0]),
	.dataa(counter_reg_bit[7]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_7.lut_mask = 16'h5A90,
		counter_comb_bita_7.sum_lutc_input = "cin",
		counter_comb_bita_7.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_8
	( 
	.cin(wire_counter_comb_bita_7cout[0:0]),
	.combout(wire_counter_comb_bita_8combout[0:0]),
	.cout(wire_counter_comb_bita_8cout[0:0]),
	.dataa(counter_reg_bit[8]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_8.lut_mask = 16'h5A90,
		counter_comb_bita_8.sum_lutc_input = "cin",
		counter_comb_bita_8.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_9
	( 
	.cin(wire_counter_comb_bita_8cout[0:0]),
	.combout(wire_counter_comb_bita_9combout[0:0]),
	.cout(),
	.dataa(counter_reg_bit[9]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_9.lut_mask = 16'h5A90,
		counter_comb_bita_9.sum_lutc_input = "cin",
		counter_comb_bita_9.lpm_type = "cycloneive_lcell_comb";
	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	// synopsys translate_off
	initial
		counter_reg_bit[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[2:2] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[2:2] == 1'b1) 
			if (wire_counter_reg_bit_sload[2:2] == 1'b1) counter_reg_bit[2:2] <= wire_counter_reg_bit_asdata[2:2];
			else  counter_reg_bit[2:2] <= wire_counter_reg_bit_d[2:2];
	// synopsys translate_off
	initial
		counter_reg_bit[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[3:3] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[3:3] == 1'b1) 
			if (wire_counter_reg_bit_sload[3:3] == 1'b1) counter_reg_bit[3:3] <= wire_counter_reg_bit_asdata[3:3];
			else  counter_reg_bit[3:3] <= wire_counter_reg_bit_d[3:3];
	// synopsys translate_off
	initial
		counter_reg_bit[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[4:4] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[4:4] == 1'b1) 
			if (wire_counter_reg_bit_sload[4:4] == 1'b1) counter_reg_bit[4:4] <= wire_counter_reg_bit_asdata[4:4];
			else  counter_reg_bit[4:4] <= wire_counter_reg_bit_d[4:4];
	// synopsys translate_off
	initial
		counter_reg_bit[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[5:5] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[5:5] == 1'b1) 
			if (wire_counter_reg_bit_sload[5:5] == 1'b1) counter_reg_bit[5:5] <= wire_counter_reg_bit_asdata[5:5];
			else  counter_reg_bit[5:5] <= wire_counter_reg_bit_d[5:5];
	// synopsys translate_off
	initial
		counter_reg_bit[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[6:6] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[6:6] == 1'b1) 
			if (wire_counter_reg_bit_sload[6:6] == 1'b1) counter_reg_bit[6:6] <= wire_counter_reg_bit_asdata[6:6];
			else  counter_reg_bit[6:6] <= wire_counter_reg_bit_d[6:6];
	// synopsys translate_off
	initial
		counter_reg_bit[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[7:7] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[7:7] == 1'b1) 
			if (wire_counter_reg_bit_sload[7:7] == 1'b1) counter_reg_bit[7:7] <= wire_counter_reg_bit_asdata[7:7];
			else  counter_reg_bit[7:7] <= wire_counter_reg_bit_d[7:7];
	// synopsys translate_off
	initial
		counter_reg_bit[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[8:8] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[8:8] == 1'b1) 
			if (wire_counter_reg_bit_sload[8:8] == 1'b1) counter_reg_bit[8:8] <= wire_counter_reg_bit_asdata[8:8];
			else  counter_reg_bit[8:8] <= wire_counter_reg_bit_d[8:8];
	// synopsys translate_off
	initial
		counter_reg_bit[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[9:9] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[9:9] == 1'b1) 
			if (wire_counter_reg_bit_sload[9:9] == 1'b1) counter_reg_bit[9:9] <= wire_counter_reg_bit_asdata[9:9];
			else  counter_reg_bit[9:9] <= wire_counter_reg_bit_d[9:9];
	assign
		wire_counter_reg_bit_asdata = ({10{(~ sclr)}} & (({10{sset}} & s_val) | ({10{(~ sset)}} & data))),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_9combout[0:0], wire_counter_comb_bita_8combout[0:0], wire_counter_comb_bita_7combout[0:0], wire_counter_comb_bita_6combout[0:0], wire_counter_comb_bita_5combout[0:0], wire_counter_comb_bita_4combout[0:0], wire_counter_comb_bita_3combout[0:0], wire_counter_comb_bita_2combout[0:0], wire_counter_comb_bita_1combout[0:0], wire_counter_comb_bita_0combout[0:0]};
	assign
		wire_counter_reg_bit_ena = {10{(clk_en & (((sclr | sset) | sload) | cnt_en))}},
		wire_counter_reg_bit_sload = {10{((sclr | sset) | sload)}};
	assign
		aclr_actual = aclr,
		clk_en = 1'b1,
		data = {10{1'b0}},
		external_cin = 1'b1,
		q = safe_q,
		s_val = {10{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = updown;
endmodule //loopback_fifo_cntr

//synthesis_resources = lut 10 reg 12 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  loopback_fifo_a_fefifo
	( 
	aclr,
	clock,
	empty,
	full,
	rreq,
	sclr,
	usedw_out,
	wreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	output   empty;
	output   full;
	input   rreq;
	input   sclr;
	output   [9:0]  usedw_out;
	input   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   rreq;
	tri0   sclr;
	tri0   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	b_full;
	reg	b_non_empty;
	wire  [9:0]   wire_count_usedw_q;
	wire  [9:0]  equal_af1;
	wire  [9:0]  equal_one;
	wire  is_almost_empty0;
	wire  is_almost_empty1;
	wire  is_almost_empty2;
	wire  is_almost_empty3;
	wire  is_almost_empty4;
	wire  is_almost_empty5;
	wire  is_almost_empty6;
	wire  is_almost_empty7;
	wire  is_almost_empty8;
	wire  is_almost_empty9;
	wire  is_almost_full0;
	wire  is_almost_full1;
	wire  is_almost_full2;
	wire  is_almost_full3;
	wire  is_almost_full4;
	wire  is_almost_full5;
	wire  is_almost_full6;
	wire  is_almost_full7;
	wire  is_almost_full8;
	wire  is_almost_full9;
	wire  [9:0]  usedw;
	wire  valid_rreq;
	wire  valid_wreq;

	// synopsys translate_off
	initial
		b_full = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_full <= 1'b0;
		else  b_full <= ((b_full & (b_full ^ (sclr | rreq))) | (((~ b_full) & b_non_empty) & ((~ sclr) & ((is_almost_full9 & wreq) & (~ rreq)))));
	// synopsys translate_off
	initial
		b_non_empty = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) b_non_empty <= 1'b0;
		else  b_non_empty <= (((b_full & (b_full ^ sclr)) | (((~ b_non_empty) & wreq) & (~ sclr))) | (((~ b_full) & b_non_empty) & (((~ b_full) & b_non_empty) ^ (sclr | ((is_almost_empty9 & rreq) & (~ wreq))))));
	loopback_fifo_cntr   count_usedw
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en((valid_wreq ^ valid_rreq)),
	.q(wire_count_usedw_q),
	.sclr(sclr),
	.updown(valid_wreq));
	assign
		empty = (~ b_non_empty),
		equal_af1 = {10{1'b0}},
		equal_one = {{9{1'b1}}, 1'b0},
		full = b_full,
		is_almost_empty0 = (usedw[0] ^ equal_one[0]),
		is_almost_empty1 = ((usedw[1] ^ equal_one[1]) & is_almost_empty0),
		is_almost_empty2 = ((usedw[2] ^ equal_one[2]) & is_almost_empty1),
		is_almost_empty3 = ((usedw[3] ^ equal_one[3]) & is_almost_empty2),
		is_almost_empty4 = ((usedw[4] ^ equal_one[4]) & is_almost_empty3),
		is_almost_empty5 = ((usedw[5] ^ equal_one[5]) & is_almost_empty4),
		is_almost_empty6 = ((usedw[6] ^ equal_one[6]) & is_almost_empty5),
		is_almost_empty7 = ((usedw[7] ^ equal_one[7]) & is_almost_empty6),
		is_almost_empty8 = ((usedw[8] ^ equal_one[8]) & is_almost_empty7),
		is_almost_empty9 = ((usedw[9] ^ equal_one[9]) & is_almost_empty8),
		is_almost_full0 = (usedw[0] ^ equal_af1[0]),
		is_almost_full1 = ((usedw[1] ^ equal_af1[1]) & is_almost_full0),
		is_almost_full2 = ((usedw[2] ^ equal_af1[2]) & is_almost_full1),
		is_almost_full3 = ((usedw[3] ^ equal_af1[3]) & is_almost_full2),
		is_almost_full4 = ((usedw[4] ^ equal_af1[4]) & is_almost_full3),
		is_almost_full5 = ((usedw[5] ^ equal_af1[5]) & is_almost_full4),
		is_almost_full6 = ((usedw[6] ^ equal_af1[6]) & is_almost_full5),
		is_almost_full7 = ((usedw[7] ^ equal_af1[7]) & is_almost_full6),
		is_almost_full8 = ((usedw[8] ^ equal_af1[8]) & is_almost_full7),
		is_almost_full9 = ((usedw[9] ^ equal_af1[9]) & is_almost_full8),
		usedw = wire_count_usedw_q,
		usedw_out = usedw,
		valid_rreq = (rreq & b_non_empty),
		valid_wreq = (wreq & (~ b_full));
endmodule //loopback_fifo_a_fefifo


//altdpram DEVICE_FAMILY="Cyclone IV E" INTENDED_DEVICE_FAMILY="Cyclone IV E" RDCONTROL_ACLR="OFF" RDCONTROL_REG="UNREGISTERED" SUPPRESS_MEMORY_CONVERSION_WARNINGS="ON" USE_EAB="ON" WIDTH=32 WIDTHAD=10 data inclock outclock outclocken q rdaddress wraddress wren
//VERSION_BEGIN 13.1 cbx_altdpram 2013:10:23:18:05:48:SJ cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END


//altsyncram ADDRESS_ACLR_A="NONE" ADDRESS_ACLR_B="NONE" ADDRESS_REG_B="CLOCK1" DEVICE_FAMILY="Cyclone IV E" INDATA_ACLR_A="NONE" OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="NONE" OUTDATA_REG_B="UNREGISTERED" RDCONTROL_ACLR_B="NONE" RDCONTROL_REG_B="CLOCK0" READ_DURING_WRITE_MODE_MIXED_PORTS="DONT_CARE" WIDTH_A=32 WIDTH_B=32 WIDTH_BYTEENA_A=4 WIDTH_BYTEENA_B=4 WIDTHAD_A=10 WIDTHAD_B=10 WRCONTROL_ACLR_A="NONE" address_a address_b clock0 clock1 clocken1 data_a q_b wren_a
//VERSION_BEGIN 13.1 cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END

//synthesis_resources = M9K 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  loopback_fifo_altsyncram
	( 
	address_a,
	address_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   [9:0]  address_a;
	input   [9:0]  address_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [31:0]  data_a;
	output   [31:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   [9:0]  address_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [31:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_ram_block2a_0portbdataout;
	wire  [0:0]   wire_ram_block2a_1portbdataout;
	wire  [0:0]   wire_ram_block2a_2portbdataout;
	wire  [0:0]   wire_ram_block2a_3portbdataout;
	wire  [0:0]   wire_ram_block2a_4portbdataout;
	wire  [0:0]   wire_ram_block2a_5portbdataout;
	wire  [0:0]   wire_ram_block2a_6portbdataout;
	wire  [0:0]   wire_ram_block2a_7portbdataout;
	wire  [0:0]   wire_ram_block2a_8portbdataout;
	wire  [0:0]   wire_ram_block2a_9portbdataout;
	wire  [0:0]   wire_ram_block2a_10portbdataout;
	wire  [0:0]   wire_ram_block2a_11portbdataout;
	wire  [0:0]   wire_ram_block2a_12portbdataout;
	wire  [0:0]   wire_ram_block2a_13portbdataout;
	wire  [0:0]   wire_ram_block2a_14portbdataout;
	wire  [0:0]   wire_ram_block2a_15portbdataout;
	wire  [0:0]   wire_ram_block2a_16portbdataout;
	wire  [0:0]   wire_ram_block2a_17portbdataout;
	wire  [0:0]   wire_ram_block2a_18portbdataout;
	wire  [0:0]   wire_ram_block2a_19portbdataout;
	wire  [0:0]   wire_ram_block2a_20portbdataout;
	wire  [0:0]   wire_ram_block2a_21portbdataout;
	wire  [0:0]   wire_ram_block2a_22portbdataout;
	wire  [0:0]   wire_ram_block2a_23portbdataout;
	wire  [0:0]   wire_ram_block2a_24portbdataout;
	wire  [0:0]   wire_ram_block2a_25portbdataout;
	wire  [0:0]   wire_ram_block2a_26portbdataout;
	wire  [0:0]   wire_ram_block2a_27portbdataout;
	wire  [0:0]   wire_ram_block2a_28portbdataout;
	wire  [0:0]   wire_ram_block2a_29portbdataout;
	wire  [0:0]   wire_ram_block2a_30portbdataout;
	wire  [0:0]   wire_ram_block2a_31portbdataout;
	wire  [9:0]  address_a_wire;
	wire  [9:0]  address_b_wire;

	cycloneive_ram_block   ram_block2a_0
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[0]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_0portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_0.clk0_core_clock_enable = "ena0",
		ram_block2a_0.clk0_input_clock_enable = "none",
		ram_block2a_0.clk1_core_clock_enable = "ena1",
		ram_block2a_0.clk1_input_clock_enable = "ena1",
		ram_block2a_0.connectivity_checking = "OFF",
		ram_block2a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_0.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_0.operation_mode = "dual_port",
		ram_block2a_0.port_a_address_width = 10,
		ram_block2a_0.port_a_data_width = 1,
		ram_block2a_0.port_a_first_address = 0,
		ram_block2a_0.port_a_first_bit_number = 0,
		ram_block2a_0.port_a_last_address = 1023,
		ram_block2a_0.port_a_logical_ram_depth = 1024,
		ram_block2a_0.port_a_logical_ram_width = 32,
		ram_block2a_0.port_b_address_clear = "none",
		ram_block2a_0.port_b_address_clock = "clock1",
		ram_block2a_0.port_b_address_width = 10,
		ram_block2a_0.port_b_data_out_clear = "none",
		ram_block2a_0.port_b_data_width = 1,
		ram_block2a_0.port_b_first_address = 0,
		ram_block2a_0.port_b_first_bit_number = 0,
		ram_block2a_0.port_b_last_address = 1023,
		ram_block2a_0.port_b_logical_ram_depth = 1024,
		ram_block2a_0.port_b_logical_ram_width = 32,
		ram_block2a_0.port_b_read_enable_clock = "clock1",
		ram_block2a_0.ram_block_type = "AUTO",
		ram_block2a_0.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_1
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[1]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_1portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_1.clk0_core_clock_enable = "ena0",
		ram_block2a_1.clk0_input_clock_enable = "none",
		ram_block2a_1.clk1_core_clock_enable = "ena1",
		ram_block2a_1.clk1_input_clock_enable = "ena1",
		ram_block2a_1.connectivity_checking = "OFF",
		ram_block2a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_1.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_1.operation_mode = "dual_port",
		ram_block2a_1.port_a_address_width = 10,
		ram_block2a_1.port_a_data_width = 1,
		ram_block2a_1.port_a_first_address = 0,
		ram_block2a_1.port_a_first_bit_number = 1,
		ram_block2a_1.port_a_last_address = 1023,
		ram_block2a_1.port_a_logical_ram_depth = 1024,
		ram_block2a_1.port_a_logical_ram_width = 32,
		ram_block2a_1.port_b_address_clear = "none",
		ram_block2a_1.port_b_address_clock = "clock1",
		ram_block2a_1.port_b_address_width = 10,
		ram_block2a_1.port_b_data_out_clear = "none",
		ram_block2a_1.port_b_data_width = 1,
		ram_block2a_1.port_b_first_address = 0,
		ram_block2a_1.port_b_first_bit_number = 1,
		ram_block2a_1.port_b_last_address = 1023,
		ram_block2a_1.port_b_logical_ram_depth = 1024,
		ram_block2a_1.port_b_logical_ram_width = 32,
		ram_block2a_1.port_b_read_enable_clock = "clock1",
		ram_block2a_1.ram_block_type = "AUTO",
		ram_block2a_1.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_2
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[2]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_2portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_2.clk0_core_clock_enable = "ena0",
		ram_block2a_2.clk0_input_clock_enable = "none",
		ram_block2a_2.clk1_core_clock_enable = "ena1",
		ram_block2a_2.clk1_input_clock_enable = "ena1",
		ram_block2a_2.connectivity_checking = "OFF",
		ram_block2a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_2.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_2.operation_mode = "dual_port",
		ram_block2a_2.port_a_address_width = 10,
		ram_block2a_2.port_a_data_width = 1,
		ram_block2a_2.port_a_first_address = 0,
		ram_block2a_2.port_a_first_bit_number = 2,
		ram_block2a_2.port_a_last_address = 1023,
		ram_block2a_2.port_a_logical_ram_depth = 1024,
		ram_block2a_2.port_a_logical_ram_width = 32,
		ram_block2a_2.port_b_address_clear = "none",
		ram_block2a_2.port_b_address_clock = "clock1",
		ram_block2a_2.port_b_address_width = 10,
		ram_block2a_2.port_b_data_out_clear = "none",
		ram_block2a_2.port_b_data_width = 1,
		ram_block2a_2.port_b_first_address = 0,
		ram_block2a_2.port_b_first_bit_number = 2,
		ram_block2a_2.port_b_last_address = 1023,
		ram_block2a_2.port_b_logical_ram_depth = 1024,
		ram_block2a_2.port_b_logical_ram_width = 32,
		ram_block2a_2.port_b_read_enable_clock = "clock1",
		ram_block2a_2.ram_block_type = "AUTO",
		ram_block2a_2.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_3
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[3]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_3portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_3.clk0_core_clock_enable = "ena0",
		ram_block2a_3.clk0_input_clock_enable = "none",
		ram_block2a_3.clk1_core_clock_enable = "ena1",
		ram_block2a_3.clk1_input_clock_enable = "ena1",
		ram_block2a_3.connectivity_checking = "OFF",
		ram_block2a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_3.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_3.operation_mode = "dual_port",
		ram_block2a_3.port_a_address_width = 10,
		ram_block2a_3.port_a_data_width = 1,
		ram_block2a_3.port_a_first_address = 0,
		ram_block2a_3.port_a_first_bit_number = 3,
		ram_block2a_3.port_a_last_address = 1023,
		ram_block2a_3.port_a_logical_ram_depth = 1024,
		ram_block2a_3.port_a_logical_ram_width = 32,
		ram_block2a_3.port_b_address_clear = "none",
		ram_block2a_3.port_b_address_clock = "clock1",
		ram_block2a_3.port_b_address_width = 10,
		ram_block2a_3.port_b_data_out_clear = "none",
		ram_block2a_3.port_b_data_width = 1,
		ram_block2a_3.port_b_first_address = 0,
		ram_block2a_3.port_b_first_bit_number = 3,
		ram_block2a_3.port_b_last_address = 1023,
		ram_block2a_3.port_b_logical_ram_depth = 1024,
		ram_block2a_3.port_b_logical_ram_width = 32,
		ram_block2a_3.port_b_read_enable_clock = "clock1",
		ram_block2a_3.ram_block_type = "AUTO",
		ram_block2a_3.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_4
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[4]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_4portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_4.clk0_core_clock_enable = "ena0",
		ram_block2a_4.clk0_input_clock_enable = "none",
		ram_block2a_4.clk1_core_clock_enable = "ena1",
		ram_block2a_4.clk1_input_clock_enable = "ena1",
		ram_block2a_4.connectivity_checking = "OFF",
		ram_block2a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_4.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_4.operation_mode = "dual_port",
		ram_block2a_4.port_a_address_width = 10,
		ram_block2a_4.port_a_data_width = 1,
		ram_block2a_4.port_a_first_address = 0,
		ram_block2a_4.port_a_first_bit_number = 4,
		ram_block2a_4.port_a_last_address = 1023,
		ram_block2a_4.port_a_logical_ram_depth = 1024,
		ram_block2a_4.port_a_logical_ram_width = 32,
		ram_block2a_4.port_b_address_clear = "none",
		ram_block2a_4.port_b_address_clock = "clock1",
		ram_block2a_4.port_b_address_width = 10,
		ram_block2a_4.port_b_data_out_clear = "none",
		ram_block2a_4.port_b_data_width = 1,
		ram_block2a_4.port_b_first_address = 0,
		ram_block2a_4.port_b_first_bit_number = 4,
		ram_block2a_4.port_b_last_address = 1023,
		ram_block2a_4.port_b_logical_ram_depth = 1024,
		ram_block2a_4.port_b_logical_ram_width = 32,
		ram_block2a_4.port_b_read_enable_clock = "clock1",
		ram_block2a_4.ram_block_type = "AUTO",
		ram_block2a_4.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_5
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[5]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_5portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_5.clk0_core_clock_enable = "ena0",
		ram_block2a_5.clk0_input_clock_enable = "none",
		ram_block2a_5.clk1_core_clock_enable = "ena1",
		ram_block2a_5.clk1_input_clock_enable = "ena1",
		ram_block2a_5.connectivity_checking = "OFF",
		ram_block2a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_5.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_5.operation_mode = "dual_port",
		ram_block2a_5.port_a_address_width = 10,
		ram_block2a_5.port_a_data_width = 1,
		ram_block2a_5.port_a_first_address = 0,
		ram_block2a_5.port_a_first_bit_number = 5,
		ram_block2a_5.port_a_last_address = 1023,
		ram_block2a_5.port_a_logical_ram_depth = 1024,
		ram_block2a_5.port_a_logical_ram_width = 32,
		ram_block2a_5.port_b_address_clear = "none",
		ram_block2a_5.port_b_address_clock = "clock1",
		ram_block2a_5.port_b_address_width = 10,
		ram_block2a_5.port_b_data_out_clear = "none",
		ram_block2a_5.port_b_data_width = 1,
		ram_block2a_5.port_b_first_address = 0,
		ram_block2a_5.port_b_first_bit_number = 5,
		ram_block2a_5.port_b_last_address = 1023,
		ram_block2a_5.port_b_logical_ram_depth = 1024,
		ram_block2a_5.port_b_logical_ram_width = 32,
		ram_block2a_5.port_b_read_enable_clock = "clock1",
		ram_block2a_5.ram_block_type = "AUTO",
		ram_block2a_5.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_6
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[6]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_6portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_6.clk0_core_clock_enable = "ena0",
		ram_block2a_6.clk0_input_clock_enable = "none",
		ram_block2a_6.clk1_core_clock_enable = "ena1",
		ram_block2a_6.clk1_input_clock_enable = "ena1",
		ram_block2a_6.connectivity_checking = "OFF",
		ram_block2a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_6.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_6.operation_mode = "dual_port",
		ram_block2a_6.port_a_address_width = 10,
		ram_block2a_6.port_a_data_width = 1,
		ram_block2a_6.port_a_first_address = 0,
		ram_block2a_6.port_a_first_bit_number = 6,
		ram_block2a_6.port_a_last_address = 1023,
		ram_block2a_6.port_a_logical_ram_depth = 1024,
		ram_block2a_6.port_a_logical_ram_width = 32,
		ram_block2a_6.port_b_address_clear = "none",
		ram_block2a_6.port_b_address_clock = "clock1",
		ram_block2a_6.port_b_address_width = 10,
		ram_block2a_6.port_b_data_out_clear = "none",
		ram_block2a_6.port_b_data_width = 1,
		ram_block2a_6.port_b_first_address = 0,
		ram_block2a_6.port_b_first_bit_number = 6,
		ram_block2a_6.port_b_last_address = 1023,
		ram_block2a_6.port_b_logical_ram_depth = 1024,
		ram_block2a_6.port_b_logical_ram_width = 32,
		ram_block2a_6.port_b_read_enable_clock = "clock1",
		ram_block2a_6.ram_block_type = "AUTO",
		ram_block2a_6.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_7
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[7]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_7portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_7.clk0_core_clock_enable = "ena0",
		ram_block2a_7.clk0_input_clock_enable = "none",
		ram_block2a_7.clk1_core_clock_enable = "ena1",
		ram_block2a_7.clk1_input_clock_enable = "ena1",
		ram_block2a_7.connectivity_checking = "OFF",
		ram_block2a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_7.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_7.operation_mode = "dual_port",
		ram_block2a_7.port_a_address_width = 10,
		ram_block2a_7.port_a_data_width = 1,
		ram_block2a_7.port_a_first_address = 0,
		ram_block2a_7.port_a_first_bit_number = 7,
		ram_block2a_7.port_a_last_address = 1023,
		ram_block2a_7.port_a_logical_ram_depth = 1024,
		ram_block2a_7.port_a_logical_ram_width = 32,
		ram_block2a_7.port_b_address_clear = "none",
		ram_block2a_7.port_b_address_clock = "clock1",
		ram_block2a_7.port_b_address_width = 10,
		ram_block2a_7.port_b_data_out_clear = "none",
		ram_block2a_7.port_b_data_width = 1,
		ram_block2a_7.port_b_first_address = 0,
		ram_block2a_7.port_b_first_bit_number = 7,
		ram_block2a_7.port_b_last_address = 1023,
		ram_block2a_7.port_b_logical_ram_depth = 1024,
		ram_block2a_7.port_b_logical_ram_width = 32,
		ram_block2a_7.port_b_read_enable_clock = "clock1",
		ram_block2a_7.ram_block_type = "AUTO",
		ram_block2a_7.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_8
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[8]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_8portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_8.clk0_core_clock_enable = "ena0",
		ram_block2a_8.clk0_input_clock_enable = "none",
		ram_block2a_8.clk1_core_clock_enable = "ena1",
		ram_block2a_8.clk1_input_clock_enable = "ena1",
		ram_block2a_8.connectivity_checking = "OFF",
		ram_block2a_8.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_8.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_8.operation_mode = "dual_port",
		ram_block2a_8.port_a_address_width = 10,
		ram_block2a_8.port_a_data_width = 1,
		ram_block2a_8.port_a_first_address = 0,
		ram_block2a_8.port_a_first_bit_number = 8,
		ram_block2a_8.port_a_last_address = 1023,
		ram_block2a_8.port_a_logical_ram_depth = 1024,
		ram_block2a_8.port_a_logical_ram_width = 32,
		ram_block2a_8.port_b_address_clear = "none",
		ram_block2a_8.port_b_address_clock = "clock1",
		ram_block2a_8.port_b_address_width = 10,
		ram_block2a_8.port_b_data_out_clear = "none",
		ram_block2a_8.port_b_data_width = 1,
		ram_block2a_8.port_b_first_address = 0,
		ram_block2a_8.port_b_first_bit_number = 8,
		ram_block2a_8.port_b_last_address = 1023,
		ram_block2a_8.port_b_logical_ram_depth = 1024,
		ram_block2a_8.port_b_logical_ram_width = 32,
		ram_block2a_8.port_b_read_enable_clock = "clock1",
		ram_block2a_8.ram_block_type = "AUTO",
		ram_block2a_8.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_9
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[9]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_9portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_9.clk0_core_clock_enable = "ena0",
		ram_block2a_9.clk0_input_clock_enable = "none",
		ram_block2a_9.clk1_core_clock_enable = "ena1",
		ram_block2a_9.clk1_input_clock_enable = "ena1",
		ram_block2a_9.connectivity_checking = "OFF",
		ram_block2a_9.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_9.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_9.operation_mode = "dual_port",
		ram_block2a_9.port_a_address_width = 10,
		ram_block2a_9.port_a_data_width = 1,
		ram_block2a_9.port_a_first_address = 0,
		ram_block2a_9.port_a_first_bit_number = 9,
		ram_block2a_9.port_a_last_address = 1023,
		ram_block2a_9.port_a_logical_ram_depth = 1024,
		ram_block2a_9.port_a_logical_ram_width = 32,
		ram_block2a_9.port_b_address_clear = "none",
		ram_block2a_9.port_b_address_clock = "clock1",
		ram_block2a_9.port_b_address_width = 10,
		ram_block2a_9.port_b_data_out_clear = "none",
		ram_block2a_9.port_b_data_width = 1,
		ram_block2a_9.port_b_first_address = 0,
		ram_block2a_9.port_b_first_bit_number = 9,
		ram_block2a_9.port_b_last_address = 1023,
		ram_block2a_9.port_b_logical_ram_depth = 1024,
		ram_block2a_9.port_b_logical_ram_width = 32,
		ram_block2a_9.port_b_read_enable_clock = "clock1",
		ram_block2a_9.ram_block_type = "AUTO",
		ram_block2a_9.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_10
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[10]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_10portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_10.clk0_core_clock_enable = "ena0",
		ram_block2a_10.clk0_input_clock_enable = "none",
		ram_block2a_10.clk1_core_clock_enable = "ena1",
		ram_block2a_10.clk1_input_clock_enable = "ena1",
		ram_block2a_10.connectivity_checking = "OFF",
		ram_block2a_10.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_10.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_10.operation_mode = "dual_port",
		ram_block2a_10.port_a_address_width = 10,
		ram_block2a_10.port_a_data_width = 1,
		ram_block2a_10.port_a_first_address = 0,
		ram_block2a_10.port_a_first_bit_number = 10,
		ram_block2a_10.port_a_last_address = 1023,
		ram_block2a_10.port_a_logical_ram_depth = 1024,
		ram_block2a_10.port_a_logical_ram_width = 32,
		ram_block2a_10.port_b_address_clear = "none",
		ram_block2a_10.port_b_address_clock = "clock1",
		ram_block2a_10.port_b_address_width = 10,
		ram_block2a_10.port_b_data_out_clear = "none",
		ram_block2a_10.port_b_data_width = 1,
		ram_block2a_10.port_b_first_address = 0,
		ram_block2a_10.port_b_first_bit_number = 10,
		ram_block2a_10.port_b_last_address = 1023,
		ram_block2a_10.port_b_logical_ram_depth = 1024,
		ram_block2a_10.port_b_logical_ram_width = 32,
		ram_block2a_10.port_b_read_enable_clock = "clock1",
		ram_block2a_10.ram_block_type = "AUTO",
		ram_block2a_10.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_11
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[11]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_11portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_11.clk0_core_clock_enable = "ena0",
		ram_block2a_11.clk0_input_clock_enable = "none",
		ram_block2a_11.clk1_core_clock_enable = "ena1",
		ram_block2a_11.clk1_input_clock_enable = "ena1",
		ram_block2a_11.connectivity_checking = "OFF",
		ram_block2a_11.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_11.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_11.operation_mode = "dual_port",
		ram_block2a_11.port_a_address_width = 10,
		ram_block2a_11.port_a_data_width = 1,
		ram_block2a_11.port_a_first_address = 0,
		ram_block2a_11.port_a_first_bit_number = 11,
		ram_block2a_11.port_a_last_address = 1023,
		ram_block2a_11.port_a_logical_ram_depth = 1024,
		ram_block2a_11.port_a_logical_ram_width = 32,
		ram_block2a_11.port_b_address_clear = "none",
		ram_block2a_11.port_b_address_clock = "clock1",
		ram_block2a_11.port_b_address_width = 10,
		ram_block2a_11.port_b_data_out_clear = "none",
		ram_block2a_11.port_b_data_width = 1,
		ram_block2a_11.port_b_first_address = 0,
		ram_block2a_11.port_b_first_bit_number = 11,
		ram_block2a_11.port_b_last_address = 1023,
		ram_block2a_11.port_b_logical_ram_depth = 1024,
		ram_block2a_11.port_b_logical_ram_width = 32,
		ram_block2a_11.port_b_read_enable_clock = "clock1",
		ram_block2a_11.ram_block_type = "AUTO",
		ram_block2a_11.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_12
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[12]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_12portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_12.clk0_core_clock_enable = "ena0",
		ram_block2a_12.clk0_input_clock_enable = "none",
		ram_block2a_12.clk1_core_clock_enable = "ena1",
		ram_block2a_12.clk1_input_clock_enable = "ena1",
		ram_block2a_12.connectivity_checking = "OFF",
		ram_block2a_12.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_12.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_12.operation_mode = "dual_port",
		ram_block2a_12.port_a_address_width = 10,
		ram_block2a_12.port_a_data_width = 1,
		ram_block2a_12.port_a_first_address = 0,
		ram_block2a_12.port_a_first_bit_number = 12,
		ram_block2a_12.port_a_last_address = 1023,
		ram_block2a_12.port_a_logical_ram_depth = 1024,
		ram_block2a_12.port_a_logical_ram_width = 32,
		ram_block2a_12.port_b_address_clear = "none",
		ram_block2a_12.port_b_address_clock = "clock1",
		ram_block2a_12.port_b_address_width = 10,
		ram_block2a_12.port_b_data_out_clear = "none",
		ram_block2a_12.port_b_data_width = 1,
		ram_block2a_12.port_b_first_address = 0,
		ram_block2a_12.port_b_first_bit_number = 12,
		ram_block2a_12.port_b_last_address = 1023,
		ram_block2a_12.port_b_logical_ram_depth = 1024,
		ram_block2a_12.port_b_logical_ram_width = 32,
		ram_block2a_12.port_b_read_enable_clock = "clock1",
		ram_block2a_12.ram_block_type = "AUTO",
		ram_block2a_12.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_13
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[13]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_13portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_13.clk0_core_clock_enable = "ena0",
		ram_block2a_13.clk0_input_clock_enable = "none",
		ram_block2a_13.clk1_core_clock_enable = "ena1",
		ram_block2a_13.clk1_input_clock_enable = "ena1",
		ram_block2a_13.connectivity_checking = "OFF",
		ram_block2a_13.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_13.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_13.operation_mode = "dual_port",
		ram_block2a_13.port_a_address_width = 10,
		ram_block2a_13.port_a_data_width = 1,
		ram_block2a_13.port_a_first_address = 0,
		ram_block2a_13.port_a_first_bit_number = 13,
		ram_block2a_13.port_a_last_address = 1023,
		ram_block2a_13.port_a_logical_ram_depth = 1024,
		ram_block2a_13.port_a_logical_ram_width = 32,
		ram_block2a_13.port_b_address_clear = "none",
		ram_block2a_13.port_b_address_clock = "clock1",
		ram_block2a_13.port_b_address_width = 10,
		ram_block2a_13.port_b_data_out_clear = "none",
		ram_block2a_13.port_b_data_width = 1,
		ram_block2a_13.port_b_first_address = 0,
		ram_block2a_13.port_b_first_bit_number = 13,
		ram_block2a_13.port_b_last_address = 1023,
		ram_block2a_13.port_b_logical_ram_depth = 1024,
		ram_block2a_13.port_b_logical_ram_width = 32,
		ram_block2a_13.port_b_read_enable_clock = "clock1",
		ram_block2a_13.ram_block_type = "AUTO",
		ram_block2a_13.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_14
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[14]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_14portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_14.clk0_core_clock_enable = "ena0",
		ram_block2a_14.clk0_input_clock_enable = "none",
		ram_block2a_14.clk1_core_clock_enable = "ena1",
		ram_block2a_14.clk1_input_clock_enable = "ena1",
		ram_block2a_14.connectivity_checking = "OFF",
		ram_block2a_14.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_14.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_14.operation_mode = "dual_port",
		ram_block2a_14.port_a_address_width = 10,
		ram_block2a_14.port_a_data_width = 1,
		ram_block2a_14.port_a_first_address = 0,
		ram_block2a_14.port_a_first_bit_number = 14,
		ram_block2a_14.port_a_last_address = 1023,
		ram_block2a_14.port_a_logical_ram_depth = 1024,
		ram_block2a_14.port_a_logical_ram_width = 32,
		ram_block2a_14.port_b_address_clear = "none",
		ram_block2a_14.port_b_address_clock = "clock1",
		ram_block2a_14.port_b_address_width = 10,
		ram_block2a_14.port_b_data_out_clear = "none",
		ram_block2a_14.port_b_data_width = 1,
		ram_block2a_14.port_b_first_address = 0,
		ram_block2a_14.port_b_first_bit_number = 14,
		ram_block2a_14.port_b_last_address = 1023,
		ram_block2a_14.port_b_logical_ram_depth = 1024,
		ram_block2a_14.port_b_logical_ram_width = 32,
		ram_block2a_14.port_b_read_enable_clock = "clock1",
		ram_block2a_14.ram_block_type = "AUTO",
		ram_block2a_14.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_15
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[15]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_15portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_15.clk0_core_clock_enable = "ena0",
		ram_block2a_15.clk0_input_clock_enable = "none",
		ram_block2a_15.clk1_core_clock_enable = "ena1",
		ram_block2a_15.clk1_input_clock_enable = "ena1",
		ram_block2a_15.connectivity_checking = "OFF",
		ram_block2a_15.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_15.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_15.operation_mode = "dual_port",
		ram_block2a_15.port_a_address_width = 10,
		ram_block2a_15.port_a_data_width = 1,
		ram_block2a_15.port_a_first_address = 0,
		ram_block2a_15.port_a_first_bit_number = 15,
		ram_block2a_15.port_a_last_address = 1023,
		ram_block2a_15.port_a_logical_ram_depth = 1024,
		ram_block2a_15.port_a_logical_ram_width = 32,
		ram_block2a_15.port_b_address_clear = "none",
		ram_block2a_15.port_b_address_clock = "clock1",
		ram_block2a_15.port_b_address_width = 10,
		ram_block2a_15.port_b_data_out_clear = "none",
		ram_block2a_15.port_b_data_width = 1,
		ram_block2a_15.port_b_first_address = 0,
		ram_block2a_15.port_b_first_bit_number = 15,
		ram_block2a_15.port_b_last_address = 1023,
		ram_block2a_15.port_b_logical_ram_depth = 1024,
		ram_block2a_15.port_b_logical_ram_width = 32,
		ram_block2a_15.port_b_read_enable_clock = "clock1",
		ram_block2a_15.ram_block_type = "AUTO",
		ram_block2a_15.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_16
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[16]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_16portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_16.clk0_core_clock_enable = "ena0",
		ram_block2a_16.clk0_input_clock_enable = "none",
		ram_block2a_16.clk1_core_clock_enable = "ena1",
		ram_block2a_16.clk1_input_clock_enable = "ena1",
		ram_block2a_16.connectivity_checking = "OFF",
		ram_block2a_16.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_16.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_16.operation_mode = "dual_port",
		ram_block2a_16.port_a_address_width = 10,
		ram_block2a_16.port_a_data_width = 1,
		ram_block2a_16.port_a_first_address = 0,
		ram_block2a_16.port_a_first_bit_number = 16,
		ram_block2a_16.port_a_last_address = 1023,
		ram_block2a_16.port_a_logical_ram_depth = 1024,
		ram_block2a_16.port_a_logical_ram_width = 32,
		ram_block2a_16.port_b_address_clear = "none",
		ram_block2a_16.port_b_address_clock = "clock1",
		ram_block2a_16.port_b_address_width = 10,
		ram_block2a_16.port_b_data_out_clear = "none",
		ram_block2a_16.port_b_data_width = 1,
		ram_block2a_16.port_b_first_address = 0,
		ram_block2a_16.port_b_first_bit_number = 16,
		ram_block2a_16.port_b_last_address = 1023,
		ram_block2a_16.port_b_logical_ram_depth = 1024,
		ram_block2a_16.port_b_logical_ram_width = 32,
		ram_block2a_16.port_b_read_enable_clock = "clock1",
		ram_block2a_16.ram_block_type = "AUTO",
		ram_block2a_16.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_17
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[17]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_17portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_17.clk0_core_clock_enable = "ena0",
		ram_block2a_17.clk0_input_clock_enable = "none",
		ram_block2a_17.clk1_core_clock_enable = "ena1",
		ram_block2a_17.clk1_input_clock_enable = "ena1",
		ram_block2a_17.connectivity_checking = "OFF",
		ram_block2a_17.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_17.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_17.operation_mode = "dual_port",
		ram_block2a_17.port_a_address_width = 10,
		ram_block2a_17.port_a_data_width = 1,
		ram_block2a_17.port_a_first_address = 0,
		ram_block2a_17.port_a_first_bit_number = 17,
		ram_block2a_17.port_a_last_address = 1023,
		ram_block2a_17.port_a_logical_ram_depth = 1024,
		ram_block2a_17.port_a_logical_ram_width = 32,
		ram_block2a_17.port_b_address_clear = "none",
		ram_block2a_17.port_b_address_clock = "clock1",
		ram_block2a_17.port_b_address_width = 10,
		ram_block2a_17.port_b_data_out_clear = "none",
		ram_block2a_17.port_b_data_width = 1,
		ram_block2a_17.port_b_first_address = 0,
		ram_block2a_17.port_b_first_bit_number = 17,
		ram_block2a_17.port_b_last_address = 1023,
		ram_block2a_17.port_b_logical_ram_depth = 1024,
		ram_block2a_17.port_b_logical_ram_width = 32,
		ram_block2a_17.port_b_read_enable_clock = "clock1",
		ram_block2a_17.ram_block_type = "AUTO",
		ram_block2a_17.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_18
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[18]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_18portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_18.clk0_core_clock_enable = "ena0",
		ram_block2a_18.clk0_input_clock_enable = "none",
		ram_block2a_18.clk1_core_clock_enable = "ena1",
		ram_block2a_18.clk1_input_clock_enable = "ena1",
		ram_block2a_18.connectivity_checking = "OFF",
		ram_block2a_18.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_18.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_18.operation_mode = "dual_port",
		ram_block2a_18.port_a_address_width = 10,
		ram_block2a_18.port_a_data_width = 1,
		ram_block2a_18.port_a_first_address = 0,
		ram_block2a_18.port_a_first_bit_number = 18,
		ram_block2a_18.port_a_last_address = 1023,
		ram_block2a_18.port_a_logical_ram_depth = 1024,
		ram_block2a_18.port_a_logical_ram_width = 32,
		ram_block2a_18.port_b_address_clear = "none",
		ram_block2a_18.port_b_address_clock = "clock1",
		ram_block2a_18.port_b_address_width = 10,
		ram_block2a_18.port_b_data_out_clear = "none",
		ram_block2a_18.port_b_data_width = 1,
		ram_block2a_18.port_b_first_address = 0,
		ram_block2a_18.port_b_first_bit_number = 18,
		ram_block2a_18.port_b_last_address = 1023,
		ram_block2a_18.port_b_logical_ram_depth = 1024,
		ram_block2a_18.port_b_logical_ram_width = 32,
		ram_block2a_18.port_b_read_enable_clock = "clock1",
		ram_block2a_18.ram_block_type = "AUTO",
		ram_block2a_18.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_19
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[19]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_19portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_19.clk0_core_clock_enable = "ena0",
		ram_block2a_19.clk0_input_clock_enable = "none",
		ram_block2a_19.clk1_core_clock_enable = "ena1",
		ram_block2a_19.clk1_input_clock_enable = "ena1",
		ram_block2a_19.connectivity_checking = "OFF",
		ram_block2a_19.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_19.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_19.operation_mode = "dual_port",
		ram_block2a_19.port_a_address_width = 10,
		ram_block2a_19.port_a_data_width = 1,
		ram_block2a_19.port_a_first_address = 0,
		ram_block2a_19.port_a_first_bit_number = 19,
		ram_block2a_19.port_a_last_address = 1023,
		ram_block2a_19.port_a_logical_ram_depth = 1024,
		ram_block2a_19.port_a_logical_ram_width = 32,
		ram_block2a_19.port_b_address_clear = "none",
		ram_block2a_19.port_b_address_clock = "clock1",
		ram_block2a_19.port_b_address_width = 10,
		ram_block2a_19.port_b_data_out_clear = "none",
		ram_block2a_19.port_b_data_width = 1,
		ram_block2a_19.port_b_first_address = 0,
		ram_block2a_19.port_b_first_bit_number = 19,
		ram_block2a_19.port_b_last_address = 1023,
		ram_block2a_19.port_b_logical_ram_depth = 1024,
		ram_block2a_19.port_b_logical_ram_width = 32,
		ram_block2a_19.port_b_read_enable_clock = "clock1",
		ram_block2a_19.ram_block_type = "AUTO",
		ram_block2a_19.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_20
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[20]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_20portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_20.clk0_core_clock_enable = "ena0",
		ram_block2a_20.clk0_input_clock_enable = "none",
		ram_block2a_20.clk1_core_clock_enable = "ena1",
		ram_block2a_20.clk1_input_clock_enable = "ena1",
		ram_block2a_20.connectivity_checking = "OFF",
		ram_block2a_20.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_20.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_20.operation_mode = "dual_port",
		ram_block2a_20.port_a_address_width = 10,
		ram_block2a_20.port_a_data_width = 1,
		ram_block2a_20.port_a_first_address = 0,
		ram_block2a_20.port_a_first_bit_number = 20,
		ram_block2a_20.port_a_last_address = 1023,
		ram_block2a_20.port_a_logical_ram_depth = 1024,
		ram_block2a_20.port_a_logical_ram_width = 32,
		ram_block2a_20.port_b_address_clear = "none",
		ram_block2a_20.port_b_address_clock = "clock1",
		ram_block2a_20.port_b_address_width = 10,
		ram_block2a_20.port_b_data_out_clear = "none",
		ram_block2a_20.port_b_data_width = 1,
		ram_block2a_20.port_b_first_address = 0,
		ram_block2a_20.port_b_first_bit_number = 20,
		ram_block2a_20.port_b_last_address = 1023,
		ram_block2a_20.port_b_logical_ram_depth = 1024,
		ram_block2a_20.port_b_logical_ram_width = 32,
		ram_block2a_20.port_b_read_enable_clock = "clock1",
		ram_block2a_20.ram_block_type = "AUTO",
		ram_block2a_20.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_21
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[21]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_21portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_21.clk0_core_clock_enable = "ena0",
		ram_block2a_21.clk0_input_clock_enable = "none",
		ram_block2a_21.clk1_core_clock_enable = "ena1",
		ram_block2a_21.clk1_input_clock_enable = "ena1",
		ram_block2a_21.connectivity_checking = "OFF",
		ram_block2a_21.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_21.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_21.operation_mode = "dual_port",
		ram_block2a_21.port_a_address_width = 10,
		ram_block2a_21.port_a_data_width = 1,
		ram_block2a_21.port_a_first_address = 0,
		ram_block2a_21.port_a_first_bit_number = 21,
		ram_block2a_21.port_a_last_address = 1023,
		ram_block2a_21.port_a_logical_ram_depth = 1024,
		ram_block2a_21.port_a_logical_ram_width = 32,
		ram_block2a_21.port_b_address_clear = "none",
		ram_block2a_21.port_b_address_clock = "clock1",
		ram_block2a_21.port_b_address_width = 10,
		ram_block2a_21.port_b_data_out_clear = "none",
		ram_block2a_21.port_b_data_width = 1,
		ram_block2a_21.port_b_first_address = 0,
		ram_block2a_21.port_b_first_bit_number = 21,
		ram_block2a_21.port_b_last_address = 1023,
		ram_block2a_21.port_b_logical_ram_depth = 1024,
		ram_block2a_21.port_b_logical_ram_width = 32,
		ram_block2a_21.port_b_read_enable_clock = "clock1",
		ram_block2a_21.ram_block_type = "AUTO",
		ram_block2a_21.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_22
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[22]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_22portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_22.clk0_core_clock_enable = "ena0",
		ram_block2a_22.clk0_input_clock_enable = "none",
		ram_block2a_22.clk1_core_clock_enable = "ena1",
		ram_block2a_22.clk1_input_clock_enable = "ena1",
		ram_block2a_22.connectivity_checking = "OFF",
		ram_block2a_22.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_22.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_22.operation_mode = "dual_port",
		ram_block2a_22.port_a_address_width = 10,
		ram_block2a_22.port_a_data_width = 1,
		ram_block2a_22.port_a_first_address = 0,
		ram_block2a_22.port_a_first_bit_number = 22,
		ram_block2a_22.port_a_last_address = 1023,
		ram_block2a_22.port_a_logical_ram_depth = 1024,
		ram_block2a_22.port_a_logical_ram_width = 32,
		ram_block2a_22.port_b_address_clear = "none",
		ram_block2a_22.port_b_address_clock = "clock1",
		ram_block2a_22.port_b_address_width = 10,
		ram_block2a_22.port_b_data_out_clear = "none",
		ram_block2a_22.port_b_data_width = 1,
		ram_block2a_22.port_b_first_address = 0,
		ram_block2a_22.port_b_first_bit_number = 22,
		ram_block2a_22.port_b_last_address = 1023,
		ram_block2a_22.port_b_logical_ram_depth = 1024,
		ram_block2a_22.port_b_logical_ram_width = 32,
		ram_block2a_22.port_b_read_enable_clock = "clock1",
		ram_block2a_22.ram_block_type = "AUTO",
		ram_block2a_22.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_23
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[23]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_23portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_23.clk0_core_clock_enable = "ena0",
		ram_block2a_23.clk0_input_clock_enable = "none",
		ram_block2a_23.clk1_core_clock_enable = "ena1",
		ram_block2a_23.clk1_input_clock_enable = "ena1",
		ram_block2a_23.connectivity_checking = "OFF",
		ram_block2a_23.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_23.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_23.operation_mode = "dual_port",
		ram_block2a_23.port_a_address_width = 10,
		ram_block2a_23.port_a_data_width = 1,
		ram_block2a_23.port_a_first_address = 0,
		ram_block2a_23.port_a_first_bit_number = 23,
		ram_block2a_23.port_a_last_address = 1023,
		ram_block2a_23.port_a_logical_ram_depth = 1024,
		ram_block2a_23.port_a_logical_ram_width = 32,
		ram_block2a_23.port_b_address_clear = "none",
		ram_block2a_23.port_b_address_clock = "clock1",
		ram_block2a_23.port_b_address_width = 10,
		ram_block2a_23.port_b_data_out_clear = "none",
		ram_block2a_23.port_b_data_width = 1,
		ram_block2a_23.port_b_first_address = 0,
		ram_block2a_23.port_b_first_bit_number = 23,
		ram_block2a_23.port_b_last_address = 1023,
		ram_block2a_23.port_b_logical_ram_depth = 1024,
		ram_block2a_23.port_b_logical_ram_width = 32,
		ram_block2a_23.port_b_read_enable_clock = "clock1",
		ram_block2a_23.ram_block_type = "AUTO",
		ram_block2a_23.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_24
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[24]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_24portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_24.clk0_core_clock_enable = "ena0",
		ram_block2a_24.clk0_input_clock_enable = "none",
		ram_block2a_24.clk1_core_clock_enable = "ena1",
		ram_block2a_24.clk1_input_clock_enable = "ena1",
		ram_block2a_24.connectivity_checking = "OFF",
		ram_block2a_24.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_24.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_24.operation_mode = "dual_port",
		ram_block2a_24.port_a_address_width = 10,
		ram_block2a_24.port_a_data_width = 1,
		ram_block2a_24.port_a_first_address = 0,
		ram_block2a_24.port_a_first_bit_number = 24,
		ram_block2a_24.port_a_last_address = 1023,
		ram_block2a_24.port_a_logical_ram_depth = 1024,
		ram_block2a_24.port_a_logical_ram_width = 32,
		ram_block2a_24.port_b_address_clear = "none",
		ram_block2a_24.port_b_address_clock = "clock1",
		ram_block2a_24.port_b_address_width = 10,
		ram_block2a_24.port_b_data_out_clear = "none",
		ram_block2a_24.port_b_data_width = 1,
		ram_block2a_24.port_b_first_address = 0,
		ram_block2a_24.port_b_first_bit_number = 24,
		ram_block2a_24.port_b_last_address = 1023,
		ram_block2a_24.port_b_logical_ram_depth = 1024,
		ram_block2a_24.port_b_logical_ram_width = 32,
		ram_block2a_24.port_b_read_enable_clock = "clock1",
		ram_block2a_24.ram_block_type = "AUTO",
		ram_block2a_24.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_25
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[25]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_25portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_25.clk0_core_clock_enable = "ena0",
		ram_block2a_25.clk0_input_clock_enable = "none",
		ram_block2a_25.clk1_core_clock_enable = "ena1",
		ram_block2a_25.clk1_input_clock_enable = "ena1",
		ram_block2a_25.connectivity_checking = "OFF",
		ram_block2a_25.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_25.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_25.operation_mode = "dual_port",
		ram_block2a_25.port_a_address_width = 10,
		ram_block2a_25.port_a_data_width = 1,
		ram_block2a_25.port_a_first_address = 0,
		ram_block2a_25.port_a_first_bit_number = 25,
		ram_block2a_25.port_a_last_address = 1023,
		ram_block2a_25.port_a_logical_ram_depth = 1024,
		ram_block2a_25.port_a_logical_ram_width = 32,
		ram_block2a_25.port_b_address_clear = "none",
		ram_block2a_25.port_b_address_clock = "clock1",
		ram_block2a_25.port_b_address_width = 10,
		ram_block2a_25.port_b_data_out_clear = "none",
		ram_block2a_25.port_b_data_width = 1,
		ram_block2a_25.port_b_first_address = 0,
		ram_block2a_25.port_b_first_bit_number = 25,
		ram_block2a_25.port_b_last_address = 1023,
		ram_block2a_25.port_b_logical_ram_depth = 1024,
		ram_block2a_25.port_b_logical_ram_width = 32,
		ram_block2a_25.port_b_read_enable_clock = "clock1",
		ram_block2a_25.ram_block_type = "AUTO",
		ram_block2a_25.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_26
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[26]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_26portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_26.clk0_core_clock_enable = "ena0",
		ram_block2a_26.clk0_input_clock_enable = "none",
		ram_block2a_26.clk1_core_clock_enable = "ena1",
		ram_block2a_26.clk1_input_clock_enable = "ena1",
		ram_block2a_26.connectivity_checking = "OFF",
		ram_block2a_26.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_26.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_26.operation_mode = "dual_port",
		ram_block2a_26.port_a_address_width = 10,
		ram_block2a_26.port_a_data_width = 1,
		ram_block2a_26.port_a_first_address = 0,
		ram_block2a_26.port_a_first_bit_number = 26,
		ram_block2a_26.port_a_last_address = 1023,
		ram_block2a_26.port_a_logical_ram_depth = 1024,
		ram_block2a_26.port_a_logical_ram_width = 32,
		ram_block2a_26.port_b_address_clear = "none",
		ram_block2a_26.port_b_address_clock = "clock1",
		ram_block2a_26.port_b_address_width = 10,
		ram_block2a_26.port_b_data_out_clear = "none",
		ram_block2a_26.port_b_data_width = 1,
		ram_block2a_26.port_b_first_address = 0,
		ram_block2a_26.port_b_first_bit_number = 26,
		ram_block2a_26.port_b_last_address = 1023,
		ram_block2a_26.port_b_logical_ram_depth = 1024,
		ram_block2a_26.port_b_logical_ram_width = 32,
		ram_block2a_26.port_b_read_enable_clock = "clock1",
		ram_block2a_26.ram_block_type = "AUTO",
		ram_block2a_26.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_27
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[27]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_27portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_27.clk0_core_clock_enable = "ena0",
		ram_block2a_27.clk0_input_clock_enable = "none",
		ram_block2a_27.clk1_core_clock_enable = "ena1",
		ram_block2a_27.clk1_input_clock_enable = "ena1",
		ram_block2a_27.connectivity_checking = "OFF",
		ram_block2a_27.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_27.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_27.operation_mode = "dual_port",
		ram_block2a_27.port_a_address_width = 10,
		ram_block2a_27.port_a_data_width = 1,
		ram_block2a_27.port_a_first_address = 0,
		ram_block2a_27.port_a_first_bit_number = 27,
		ram_block2a_27.port_a_last_address = 1023,
		ram_block2a_27.port_a_logical_ram_depth = 1024,
		ram_block2a_27.port_a_logical_ram_width = 32,
		ram_block2a_27.port_b_address_clear = "none",
		ram_block2a_27.port_b_address_clock = "clock1",
		ram_block2a_27.port_b_address_width = 10,
		ram_block2a_27.port_b_data_out_clear = "none",
		ram_block2a_27.port_b_data_width = 1,
		ram_block2a_27.port_b_first_address = 0,
		ram_block2a_27.port_b_first_bit_number = 27,
		ram_block2a_27.port_b_last_address = 1023,
		ram_block2a_27.port_b_logical_ram_depth = 1024,
		ram_block2a_27.port_b_logical_ram_width = 32,
		ram_block2a_27.port_b_read_enable_clock = "clock1",
		ram_block2a_27.ram_block_type = "AUTO",
		ram_block2a_27.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_28
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[28]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_28portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_28.clk0_core_clock_enable = "ena0",
		ram_block2a_28.clk0_input_clock_enable = "none",
		ram_block2a_28.clk1_core_clock_enable = "ena1",
		ram_block2a_28.clk1_input_clock_enable = "ena1",
		ram_block2a_28.connectivity_checking = "OFF",
		ram_block2a_28.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_28.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_28.operation_mode = "dual_port",
		ram_block2a_28.port_a_address_width = 10,
		ram_block2a_28.port_a_data_width = 1,
		ram_block2a_28.port_a_first_address = 0,
		ram_block2a_28.port_a_first_bit_number = 28,
		ram_block2a_28.port_a_last_address = 1023,
		ram_block2a_28.port_a_logical_ram_depth = 1024,
		ram_block2a_28.port_a_logical_ram_width = 32,
		ram_block2a_28.port_b_address_clear = "none",
		ram_block2a_28.port_b_address_clock = "clock1",
		ram_block2a_28.port_b_address_width = 10,
		ram_block2a_28.port_b_data_out_clear = "none",
		ram_block2a_28.port_b_data_width = 1,
		ram_block2a_28.port_b_first_address = 0,
		ram_block2a_28.port_b_first_bit_number = 28,
		ram_block2a_28.port_b_last_address = 1023,
		ram_block2a_28.port_b_logical_ram_depth = 1024,
		ram_block2a_28.port_b_logical_ram_width = 32,
		ram_block2a_28.port_b_read_enable_clock = "clock1",
		ram_block2a_28.ram_block_type = "AUTO",
		ram_block2a_28.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_29
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[29]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_29portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_29.clk0_core_clock_enable = "ena0",
		ram_block2a_29.clk0_input_clock_enable = "none",
		ram_block2a_29.clk1_core_clock_enable = "ena1",
		ram_block2a_29.clk1_input_clock_enable = "ena1",
		ram_block2a_29.connectivity_checking = "OFF",
		ram_block2a_29.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_29.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_29.operation_mode = "dual_port",
		ram_block2a_29.port_a_address_width = 10,
		ram_block2a_29.port_a_data_width = 1,
		ram_block2a_29.port_a_first_address = 0,
		ram_block2a_29.port_a_first_bit_number = 29,
		ram_block2a_29.port_a_last_address = 1023,
		ram_block2a_29.port_a_logical_ram_depth = 1024,
		ram_block2a_29.port_a_logical_ram_width = 32,
		ram_block2a_29.port_b_address_clear = "none",
		ram_block2a_29.port_b_address_clock = "clock1",
		ram_block2a_29.port_b_address_width = 10,
		ram_block2a_29.port_b_data_out_clear = "none",
		ram_block2a_29.port_b_data_width = 1,
		ram_block2a_29.port_b_first_address = 0,
		ram_block2a_29.port_b_first_bit_number = 29,
		ram_block2a_29.port_b_last_address = 1023,
		ram_block2a_29.port_b_logical_ram_depth = 1024,
		ram_block2a_29.port_b_logical_ram_width = 32,
		ram_block2a_29.port_b_read_enable_clock = "clock1",
		ram_block2a_29.ram_block_type = "AUTO",
		ram_block2a_29.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_30
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[30]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_30portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_30.clk0_core_clock_enable = "ena0",
		ram_block2a_30.clk0_input_clock_enable = "none",
		ram_block2a_30.clk1_core_clock_enable = "ena1",
		ram_block2a_30.clk1_input_clock_enable = "ena1",
		ram_block2a_30.connectivity_checking = "OFF",
		ram_block2a_30.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_30.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_30.operation_mode = "dual_port",
		ram_block2a_30.port_a_address_width = 10,
		ram_block2a_30.port_a_data_width = 1,
		ram_block2a_30.port_a_first_address = 0,
		ram_block2a_30.port_a_first_bit_number = 30,
		ram_block2a_30.port_a_last_address = 1023,
		ram_block2a_30.port_a_logical_ram_depth = 1024,
		ram_block2a_30.port_a_logical_ram_width = 32,
		ram_block2a_30.port_b_address_clear = "none",
		ram_block2a_30.port_b_address_clock = "clock1",
		ram_block2a_30.port_b_address_width = 10,
		ram_block2a_30.port_b_data_out_clear = "none",
		ram_block2a_30.port_b_data_width = 1,
		ram_block2a_30.port_b_first_address = 0,
		ram_block2a_30.port_b_first_bit_number = 30,
		ram_block2a_30.port_b_last_address = 1023,
		ram_block2a_30.port_b_logical_ram_depth = 1024,
		ram_block2a_30.port_b_logical_ram_width = 32,
		ram_block2a_30.port_b_read_enable_clock = "clock1",
		ram_block2a_30.ram_block_type = "AUTO",
		ram_block2a_30.lpm_type = "cycloneive_ram_block";
	cycloneive_ram_block   ram_block2a_31
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[9:0]}),
	.portadatain({data_a[31]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[9:0]}),
	.portbdataout(wire_ram_block2a_31portbdataout[0:0]),
	.portbre(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.ena2(1'b1),
	.ena3(1'b1),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portare(1'b1),
	.portbaddrstall(1'b0),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}}),
	.portbwe(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block2a_31.clk0_core_clock_enable = "ena0",
		ram_block2a_31.clk0_input_clock_enable = "none",
		ram_block2a_31.clk1_core_clock_enable = "ena1",
		ram_block2a_31.clk1_input_clock_enable = "ena1",
		ram_block2a_31.connectivity_checking = "OFF",
		ram_block2a_31.logical_ram_name = "ALTSYNCRAM",
		ram_block2a_31.mixed_port_feed_through_mode = "dont_care",
		ram_block2a_31.operation_mode = "dual_port",
		ram_block2a_31.port_a_address_width = 10,
		ram_block2a_31.port_a_data_width = 1,
		ram_block2a_31.port_a_first_address = 0,
		ram_block2a_31.port_a_first_bit_number = 31,
		ram_block2a_31.port_a_last_address = 1023,
		ram_block2a_31.port_a_logical_ram_depth = 1024,
		ram_block2a_31.port_a_logical_ram_width = 32,
		ram_block2a_31.port_b_address_clear = "none",
		ram_block2a_31.port_b_address_clock = "clock1",
		ram_block2a_31.port_b_address_width = 10,
		ram_block2a_31.port_b_data_out_clear = "none",
		ram_block2a_31.port_b_data_width = 1,
		ram_block2a_31.port_b_first_address = 0,
		ram_block2a_31.port_b_first_bit_number = 31,
		ram_block2a_31.port_b_last_address = 1023,
		ram_block2a_31.port_b_logical_ram_depth = 1024,
		ram_block2a_31.port_b_logical_ram_width = 32,
		ram_block2a_31.port_b_read_enable_clock = "clock1",
		ram_block2a_31.ram_block_type = "AUTO",
		ram_block2a_31.lpm_type = "cycloneive_ram_block";
	assign
		address_a_wire = address_a,
		address_b_wire = address_b,
		q_b = {wire_ram_block2a_31portbdataout[0], wire_ram_block2a_30portbdataout[0], wire_ram_block2a_29portbdataout[0], wire_ram_block2a_28portbdataout[0], wire_ram_block2a_27portbdataout[0], wire_ram_block2a_26portbdataout[0], wire_ram_block2a_25portbdataout[0], wire_ram_block2a_24portbdataout[0], wire_ram_block2a_23portbdataout[0], wire_ram_block2a_22portbdataout[0], wire_ram_block2a_21portbdataout[0], wire_ram_block2a_20portbdataout[0], wire_ram_block2a_19portbdataout[0], wire_ram_block2a_18portbdataout[0], wire_ram_block2a_17portbdataout[0], wire_ram_block2a_16portbdataout[0], wire_ram_block2a_15portbdataout[0], wire_ram_block2a_14portbdataout[0], wire_ram_block2a_13portbdataout[0], wire_ram_block2a_12portbdataout[0], wire_ram_block2a_11portbdataout[0], wire_ram_block2a_10portbdataout[0], wire_ram_block2a_9portbdataout[0], wire_ram_block2a_8portbdataout[0], wire_ram_block2a_7portbdataout[0], wire_ram_block2a_6portbdataout[0], wire_ram_block2a_5portbdataout[0], wire_ram_block2a_4portbdataout[0], wire_ram_block2a_3portbdataout[0], wire_ram_block2a_2portbdataout[0], wire_ram_block2a_1portbdataout[0], wire_ram_block2a_0portbdataout[0]};
endmodule //loopback_fifo_altsyncram

//synthesis_resources = M9K 4 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  loopback_fifo_dpram
	( 
	data,
	inclock,
	outclock,
	outclocken,
	q,
	rdaddress,
	wraddress,
	wren) /* synthesis synthesis_clearbox=1 */;
	input   [31:0]  data;
	input   inclock;
	input   outclock;
	input   outclocken;
	output   [31:0]  q;
	input   [9:0]  rdaddress;
	input   [9:0]  wraddress;
	input   wren;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   inclock;
	tri1   outclock;
	tri1   outclocken;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [31:0]   wire_altsyncram1_q_b;

	loopback_fifo_altsyncram   altsyncram1
	( 
	.address_a(wraddress),
	.address_b(rdaddress),
	.clock0(inclock),
	.clock1(outclock),
	.clocken1(outclocken),
	.data_a(data),
	.q_b(wire_altsyncram1_q_b),
	.wren_a(wren));
	assign
		q = wire_altsyncram1_q_b;
endmodule //loopback_fifo_dpram


//lpm_counter DEVICE_FAMILY="Cyclone IV E" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=10 aclr clock cnt_en q sclr
//VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END

//synthesis_resources = lut 10 reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  loopback_fifo_cntr1
	( 
	aclr,
	clock,
	cnt_en,
	q,
	sclr) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [9:0]  q;
	input   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_comb_bita_0combout;
	wire  [0:0]   wire_counter_comb_bita_1combout;
	wire  [0:0]   wire_counter_comb_bita_2combout;
	wire  [0:0]   wire_counter_comb_bita_3combout;
	wire  [0:0]   wire_counter_comb_bita_4combout;
	wire  [0:0]   wire_counter_comb_bita_5combout;
	wire  [0:0]   wire_counter_comb_bita_6combout;
	wire  [0:0]   wire_counter_comb_bita_7combout;
	wire  [0:0]   wire_counter_comb_bita_8combout;
	wire  [0:0]   wire_counter_comb_bita_9combout;
	wire  [0:0]   wire_counter_comb_bita_0cout;
	wire  [0:0]   wire_counter_comb_bita_1cout;
	wire  [0:0]   wire_counter_comb_bita_2cout;
	wire  [0:0]   wire_counter_comb_bita_3cout;
	wire  [0:0]   wire_counter_comb_bita_4cout;
	wire  [0:0]   wire_counter_comb_bita_5cout;
	wire  [0:0]   wire_counter_comb_bita_6cout;
	wire  [0:0]   wire_counter_comb_bita_7cout;
	wire  [0:0]   wire_counter_comb_bita_8cout;
	wire	[9:0]	wire_counter_reg_bit_d;
	wire	[9:0]	wire_counter_reg_bit_asdata;
	reg	[9:0]	counter_reg_bit;
	wire	[9:0]	wire_counter_reg_bit_ena;
	wire	[9:0]	wire_counter_reg_bit_sload;
	wire  aclr_actual;
	wire clk_en;
	wire [9:0]  data;
	wire  external_cin;
	wire  [9:0]  s_val;
	wire  [9:0]  safe_q;
	wire sload;
	wire sset;
	wire  updown_dir;

	cycloneive_lcell_comb   counter_comb_bita_0
	( 
	.cin(external_cin),
	.combout(wire_counter_comb_bita_0combout[0:0]),
	.cout(wire_counter_comb_bita_0cout[0:0]),
	.dataa(counter_reg_bit[0]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_0.lut_mask = 16'h5A90,
		counter_comb_bita_0.sum_lutc_input = "cin",
		counter_comb_bita_0.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_1
	( 
	.cin(wire_counter_comb_bita_0cout[0:0]),
	.combout(wire_counter_comb_bita_1combout[0:0]),
	.cout(wire_counter_comb_bita_1cout[0:0]),
	.dataa(counter_reg_bit[1]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_1.lut_mask = 16'h5A90,
		counter_comb_bita_1.sum_lutc_input = "cin",
		counter_comb_bita_1.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_2
	( 
	.cin(wire_counter_comb_bita_1cout[0:0]),
	.combout(wire_counter_comb_bita_2combout[0:0]),
	.cout(wire_counter_comb_bita_2cout[0:0]),
	.dataa(counter_reg_bit[2]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_2.lut_mask = 16'h5A90,
		counter_comb_bita_2.sum_lutc_input = "cin",
		counter_comb_bita_2.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_3
	( 
	.cin(wire_counter_comb_bita_2cout[0:0]),
	.combout(wire_counter_comb_bita_3combout[0:0]),
	.cout(wire_counter_comb_bita_3cout[0:0]),
	.dataa(counter_reg_bit[3]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_3.lut_mask = 16'h5A90,
		counter_comb_bita_3.sum_lutc_input = "cin",
		counter_comb_bita_3.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_4
	( 
	.cin(wire_counter_comb_bita_3cout[0:0]),
	.combout(wire_counter_comb_bita_4combout[0:0]),
	.cout(wire_counter_comb_bita_4cout[0:0]),
	.dataa(counter_reg_bit[4]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_4.lut_mask = 16'h5A90,
		counter_comb_bita_4.sum_lutc_input = "cin",
		counter_comb_bita_4.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_5
	( 
	.cin(wire_counter_comb_bita_4cout[0:0]),
	.combout(wire_counter_comb_bita_5combout[0:0]),
	.cout(wire_counter_comb_bita_5cout[0:0]),
	.dataa(counter_reg_bit[5]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_5.lut_mask = 16'h5A90,
		counter_comb_bita_5.sum_lutc_input = "cin",
		counter_comb_bita_5.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_6
	( 
	.cin(wire_counter_comb_bita_5cout[0:0]),
	.combout(wire_counter_comb_bita_6combout[0:0]),
	.cout(wire_counter_comb_bita_6cout[0:0]),
	.dataa(counter_reg_bit[6]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_6.lut_mask = 16'h5A90,
		counter_comb_bita_6.sum_lutc_input = "cin",
		counter_comb_bita_6.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_7
	( 
	.cin(wire_counter_comb_bita_6cout[0:0]),
	.combout(wire_counter_comb_bita_7combout[0:0]),
	.cout(wire_counter_comb_bita_7cout[0:0]),
	.dataa(counter_reg_bit[7]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_7.lut_mask = 16'h5A90,
		counter_comb_bita_7.sum_lutc_input = "cin",
		counter_comb_bita_7.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_8
	( 
	.cin(wire_counter_comb_bita_7cout[0:0]),
	.combout(wire_counter_comb_bita_8combout[0:0]),
	.cout(wire_counter_comb_bita_8cout[0:0]),
	.dataa(counter_reg_bit[8]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_8.lut_mask = 16'h5A90,
		counter_comb_bita_8.sum_lutc_input = "cin",
		counter_comb_bita_8.lpm_type = "cycloneive_lcell_comb";
	cycloneive_lcell_comb   counter_comb_bita_9
	( 
	.cin(wire_counter_comb_bita_8cout[0:0]),
	.combout(wire_counter_comb_bita_9combout[0:0]),
	.cout(),
	.dataa(counter_reg_bit[9]),
	.datab(updown_dir),
	.datad(1'b1),
	.datac(1'b0)
	);
	defparam
		counter_comb_bita_9.lut_mask = 16'h5A90,
		counter_comb_bita_9.sum_lutc_input = "cin",
		counter_comb_bita_9.lpm_type = "cycloneive_lcell_comb";
	// synopsys translate_off
	initial
		counter_reg_bit[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[0:0] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[0:0] == 1'b1) 
			if (wire_counter_reg_bit_sload[0:0] == 1'b1) counter_reg_bit[0:0] <= wire_counter_reg_bit_asdata[0:0];
			else  counter_reg_bit[0:0] <= wire_counter_reg_bit_d[0:0];
	// synopsys translate_off
	initial
		counter_reg_bit[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[1:1] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[1:1] == 1'b1) 
			if (wire_counter_reg_bit_sload[1:1] == 1'b1) counter_reg_bit[1:1] <= wire_counter_reg_bit_asdata[1:1];
			else  counter_reg_bit[1:1] <= wire_counter_reg_bit_d[1:1];
	// synopsys translate_off
	initial
		counter_reg_bit[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[2:2] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[2:2] == 1'b1) 
			if (wire_counter_reg_bit_sload[2:2] == 1'b1) counter_reg_bit[2:2] <= wire_counter_reg_bit_asdata[2:2];
			else  counter_reg_bit[2:2] <= wire_counter_reg_bit_d[2:2];
	// synopsys translate_off
	initial
		counter_reg_bit[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[3:3] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[3:3] == 1'b1) 
			if (wire_counter_reg_bit_sload[3:3] == 1'b1) counter_reg_bit[3:3] <= wire_counter_reg_bit_asdata[3:3];
			else  counter_reg_bit[3:3] <= wire_counter_reg_bit_d[3:3];
	// synopsys translate_off
	initial
		counter_reg_bit[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[4:4] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[4:4] == 1'b1) 
			if (wire_counter_reg_bit_sload[4:4] == 1'b1) counter_reg_bit[4:4] <= wire_counter_reg_bit_asdata[4:4];
			else  counter_reg_bit[4:4] <= wire_counter_reg_bit_d[4:4];
	// synopsys translate_off
	initial
		counter_reg_bit[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[5:5] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[5:5] == 1'b1) 
			if (wire_counter_reg_bit_sload[5:5] == 1'b1) counter_reg_bit[5:5] <= wire_counter_reg_bit_asdata[5:5];
			else  counter_reg_bit[5:5] <= wire_counter_reg_bit_d[5:5];
	// synopsys translate_off
	initial
		counter_reg_bit[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[6:6] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[6:6] == 1'b1) 
			if (wire_counter_reg_bit_sload[6:6] == 1'b1) counter_reg_bit[6:6] <= wire_counter_reg_bit_asdata[6:6];
			else  counter_reg_bit[6:6] <= wire_counter_reg_bit_d[6:6];
	// synopsys translate_off
	initial
		counter_reg_bit[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[7:7] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[7:7] == 1'b1) 
			if (wire_counter_reg_bit_sload[7:7] == 1'b1) counter_reg_bit[7:7] <= wire_counter_reg_bit_asdata[7:7];
			else  counter_reg_bit[7:7] <= wire_counter_reg_bit_d[7:7];
	// synopsys translate_off
	initial
		counter_reg_bit[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[8:8] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[8:8] == 1'b1) 
			if (wire_counter_reg_bit_sload[8:8] == 1'b1) counter_reg_bit[8:8] <= wire_counter_reg_bit_asdata[8:8];
			else  counter_reg_bit[8:8] <= wire_counter_reg_bit_d[8:8];
	// synopsys translate_off
	initial
		counter_reg_bit[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr_actual)
		if (aclr_actual == 1'b1) counter_reg_bit[9:9] <= 1'b0;
		else if  (wire_counter_reg_bit_ena[9:9] == 1'b1) 
			if (wire_counter_reg_bit_sload[9:9] == 1'b1) counter_reg_bit[9:9] <= wire_counter_reg_bit_asdata[9:9];
			else  counter_reg_bit[9:9] <= wire_counter_reg_bit_d[9:9];
	assign
		wire_counter_reg_bit_asdata = ({10{(~ sclr)}} & (({10{sset}} & s_val) | ({10{(~ sset)}} & data))),
		wire_counter_reg_bit_d = {wire_counter_comb_bita_9combout[0:0], wire_counter_comb_bita_8combout[0:0], wire_counter_comb_bita_7combout[0:0], wire_counter_comb_bita_6combout[0:0], wire_counter_comb_bita_5combout[0:0], wire_counter_comb_bita_4combout[0:0], wire_counter_comb_bita_3combout[0:0], wire_counter_comb_bita_2combout[0:0], wire_counter_comb_bita_1combout[0:0], wire_counter_comb_bita_0combout[0:0]};
	assign
		wire_counter_reg_bit_ena = {10{(clk_en & (((sclr | sset) | sload) | cnt_en))}},
		wire_counter_reg_bit_sload = {10{((sclr | sset) | sload)}};
	assign
		aclr_actual = aclr,
		clk_en = 1'b1,
		data = {10{1'b0}},
		external_cin = 1'b1,
		q = safe_q,
		s_val = {10{1'b1}},
		safe_q = counter_reg_bit,
		sload = 1'b0,
		sset = 1'b0,
		updown_dir = 1'b1;
endmodule //loopback_fifo_cntr1

//synthesis_resources = lut 30 M9K 4 reg 32 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  loopback_fifo_a_dpfifo
	( 
	aclr,
	clock,
	data,
	q,
	rreq,
	sclr,
	usedw,
	wreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [31:0]  data;
	output   [31:0]  q;
	input   rreq;
	input   sclr;
	output   [9:0]  usedw;
	input   wreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   sclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_fifo_state_empty;
	wire  wire_fifo_state_full;
	wire  [9:0]   wire_fifo_state_usedw_out;
	wire  [31:0]   wire_FIFOram_q;
	wire  [9:0]   wire_rd_ptr_count_q;
	wire  [9:0]   wire_wr_ptr_q;
	wire  [9:0]  rd_ptr;
	wire  valid_rreq;
	wire  valid_wreq;

	loopback_fifo_a_fefifo   fifo_state
	( 
	.aclr(aclr),
	.clock(clock),
	.empty(wire_fifo_state_empty),
	.full(wire_fifo_state_full),
	.rreq(rreq),
	.sclr(sclr),
	.usedw_out(wire_fifo_state_usedw_out),
	.wreq(wreq));
	loopback_fifo_dpram   FIFOram
	( 
	.data(data),
	.inclock(clock),
	.outclock(clock),
	.outclocken((valid_rreq | sclr)),
	.q(wire_FIFOram_q),
	.rdaddress(({10{(~ sclr)}} & rd_ptr)),
	.wraddress(wire_wr_ptr_q),
	.wren(valid_wreq));
	loopback_fifo_cntr1   rd_ptr_count
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en(valid_rreq),
	.q(wire_rd_ptr_count_q),
	.sclr(sclr));
	loopback_fifo_cntr1   wr_ptr
	( 
	.aclr(aclr),
	.clock(clock),
	.cnt_en(valid_wreq),
	.q(wire_wr_ptr_q),
	.sclr(sclr));
	assign
		q = wire_FIFOram_q,
		rd_ptr = wire_rd_ptr_count_q,
		usedw = wire_fifo_state_usedw_out,
		valid_rreq = (rreq & (~ wire_fifo_state_empty)),
		valid_wreq = (wreq & (~ wire_fifo_state_full));
endmodule //loopback_fifo_a_dpfifo

//synthesis_resources = lut 30 M9K 4 reg 32 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  loopback_fifo_scfifo
	( 
	aclr,
	clock,
	data,
	q,
	rdreq,
	usedw,
	wrreq) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [31:0]  data;
	output   [31:0]  q;
	input   rdreq;
	output   [9:0]  usedw;
	input   wrreq;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [31:0]   wire_dpfifo_q;
	wire  [9:0]   wire_dpfifo_usedw;
	wire sclr;

	loopback_fifo_a_dpfifo   dpfifo
	( 
	.aclr(aclr),
	.clock(clock),
	.data(data),
	.q(wire_dpfifo_q),
	.rreq(rdreq),
	.sclr(sclr),
	.usedw(wire_dpfifo_usedw),
	.wreq(wrreq));
	assign
		q = wire_dpfifo_q,
		sclr = 1'b0,
		usedw = wire_dpfifo_usedw;
endmodule //loopback_fifo_scfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module loopback_fifo (
	aclr,
	clock,
	data,
	rdreq,
	wrreq,
	q,
	usedw)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	  clock;
	input	[31:0]  data;
	input	  rdreq;
	input	  wrreq;
	output	[31:0]  q;
	output	[9:0]  usedw;

	wire [9:0] sub_wire0;
	wire [31:0] sub_wire1;
	wire [9:0] usedw = sub_wire0[9:0];
	wire [31:0] q = sub_wire1[31:0];

	loopback_fifo_scfifo	loopback_fifo_scfifo_component (
				.aclr (aclr),
				.clock (clock),
				.data (data),
				.rdreq (rdreq),
				.wrreq (wrreq),
				.usedw (sub_wire0),
				.q (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "1"
// Retrieval info: PRIVATE: Clock NUMERIC "0"
// Retrieval info: PRIVATE: Depth NUMERIC "1024"
// Retrieval info: PRIVATE: Empty NUMERIC "0"
// Retrieval info: PRIVATE: Full NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "0"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "0"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "32"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "32"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "0"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "1"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "0"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "0"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: ADD_RAM_OUTPUT_REGISTER STRING "OFF"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "1024"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "scfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "32"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "10"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: data 0 0 32 0 INPUT NODEFVAL "data[31..0]"
// Retrieval info: USED_PORT: q 0 0 32 0 OUTPUT NODEFVAL "q[31..0]"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: usedw 0 0 10 0 OUTPUT NODEFVAL "usedw[9..0]"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 32 0 data 0 0 32 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: q 0 0 32 0 @q 0 0 32 0
// Retrieval info: CONNECT: usedw 0 0 10 0 @usedw 0 0 10 0
// Retrieval info: GEN_FILE: TYPE_NORMAL loopback_fifo.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL loopback_fifo.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL loopback_fifo.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL loopback_fifo.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL loopback_fifo_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL loopback_fifo_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL loopback_fifo_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf
